datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

model Configuration {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model RequestLog {
  id        String   @id @default(cuid())
  userEmail String?  @db.VarChar(150) // Limit string length
  method    String   @db.VarChar(10) // Short methods (GET, POST)
  path      String   @db.VarChar(255) // Path limit (optional)
  ip        String?  @db.VarChar(45) // IPv6 max length is 45 chars
  timestamp DateTime @default(now())
}

model AccessLog {
  id        String   @id @default(cuid())
  userEmail String   @db.VarChar(150) // Limit string length
  userRole  String   @db.VarChar(50) // Limit string length
  method    String   @db.VarChar(10) // Short methods (GET, POST)
  path      String   @db.VarChar(255) // Path limit (optional)
  ip        String?  @db.VarChar(45) // IPv6 max length is 45 chars
  timestamp DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Group
model Group {
  id         Int         @id @default(autoincrement())
  name       String
  userGroups UserGroup[]
  ACLs       ACL[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//userGroup
model UserGroup {
  userId  String
  groupId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  salt          String?

  roleId     Int?
  role       Role?       @relation(fields: [roleId], references: [id])
  userGroups UserGroup[]
  ACLs       ACL[]

  status                String    @default("PENDING")
  requireChangePassword Boolean   @default(false)
  project               Project[]

  tokenVersion      Int      @default(0) // Track token version for invalidation
  passwordUpdatedAt DateTime @default(now()) // Track when password was last updated

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique // Ensure the role name is unique
  RolePermissions RolePermission[]
  ACL             ACL[]
  User            User[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  RolePermissions RolePermission[]
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model ACL {
  id      String  @id @default(cuid())
  userId  String?
  groupId Int?
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  projectId Int?
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  providerId Int?
  Provider   Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)

  roleId Int // Foreign key to Role
  Role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Project model
model Project {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique
  name        String
  description String?
  ownerId     String
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  ACLs ACL[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProjectProvider ProjectProvider[]

  @@unique([ownerId, name])
}

// Provider model
model Provider {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  config Json
  ACLs   ACL[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProjectProvider ProjectProvider[]
}

// ProjectProvider Model
model ProjectProvider {
  id         Int @id @default(autoincrement())
  projectId  Int
  providerId Int

  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([projectId, providerId])
}

model LineUser {
  id        Int     @id @default(autoincrement())
  userId    String  @unique
  createdAt DateTime @default(now())
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?  // Nullable field for the image URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}